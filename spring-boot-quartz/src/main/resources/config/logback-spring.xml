<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="60000" debug="false">

    <!--上下文中填值  输出文件的地址和名称信息-->
    <property name="logback.logdir" value="./log"/>
    <property name="logback.appname" value="app"/>
    <!--输出格式和输出位置-->

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
    <!-- Console 输出设置 -->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    <!--输出到文件-->
    <appender name="fileLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            &lt;!&ndash;过滤 Error&ndash;&gt;
            <level>ERROR</level>
            &lt;!&ndash;匹配到就禁止&ndash;&gt;
            <onMatch>DENY</onMatch>
            &lt;!&ndash;没有匹配到就允许&ndash;&gt;
            <onMismatch>ACCEPT</onMismatch>
        </filter>-->
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <File>${logback.logdir}/info.${logback.appname}.log</File>
        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
            <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log.%i.log</FileNamePattern>
            <!--只保留最近90天的日志-->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--设置文件分割大小-->
                <maxFileSize>200MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
            <!--<totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
        <!--日志输出编码格式化-->
        <encoder>
            <charset>UTF-8</charset>
            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
        </encoder>
    </appender>

    <!--开启tcp格式的logstash传输，通过TCP协议连接Logstash-->
    <!--<appender name="stash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>10.10.94.44:8888</destination>
        <encoder class="net.logstash.logback.encoder.LogstashEncoder" >
            &lt;!&ndash;<providers>&ndash;&gt;
                &lt;!&ndash;<timestamp>&ndash;&gt;
                    &lt;!&ndash;<timeZone>UTC</timeZone>&ndash;&gt;
                &lt;!&ndash;</timestamp>&ndash;&gt;
                &lt;!&ndash;<pattern>&ndash;&gt;
                    &lt;!&ndash;<pattern>&ndash;&gt;
                        &lt;!&ndash;{&ndash;&gt;
                        &lt;!&ndash;"severity": "%level",&ndash;&gt;
                        &lt;!&ndash;"service": "${springAppName:-}",&ndash;&gt;
                        &lt;!&ndash;"trace": "%X{X-B3-TraceId:-}",&ndash;&gt;
                        &lt;!&ndash;"span": "%X{X-B3-SpanId:-}",&ndash;&gt;
                        &lt;!&ndash;"exportable": "%X{X-Span-Export:-}",&ndash;&gt;
                        &lt;!&ndash;"pid": "${PID:-}",&ndash;&gt;
                        &lt;!&ndash;"thread": "%thread",&ndash;&gt;
                        &lt;!&ndash;"class": "%logger{40}",&ndash;&gt;
                        &lt;!&ndash;"msg": "%message"&ndash;&gt;
                        &lt;!&ndash;}&ndash;&gt;
                    &lt;!&ndash;</pattern>&ndash;&gt;
                &lt;!&ndash;</pattern>&ndash;&gt;
            &lt;!&ndash;</providers>&ndash;&gt;
        </encoder>
    </appender>-->

    <!--设置所有信息的级别-->
    <root level="info">
        <appender-ref ref="consoleLog" />
        <appender-ref ref="fileLog" />
        <!--<appender-ref ref="stash" />-->
    </root>
    <!--设置具体包或者类的级别-->
    <logger name="io.lettuce.core.protocol" level="info" />
    <logger name="com.neusoft" level="trace" />

</configuration>